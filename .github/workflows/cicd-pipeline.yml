name: CI/CD Pipeline - ML API

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  PROJECT_ID: graphite-byte-472516-n8
  REGION: us-central1
  REPO_NAME: ml-repo
  IMAGE_NAME: ml-api
  SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}

jobs:
  # Job 1: Testes unitários
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest

      - name: Run tests
        run: pytest tests/

  # Job 2: Build e Push Docker
  docker:
    runs-on: ubuntu-latest
    needs: test
    outputs:
      version: ${{ steps.set-version.outputs.version }}   # <-- output para exportar versão
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ env.PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          export_default_credentials: true

      - name: Configure Docker
        run: gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev

      - name: Set Docker image version
        id: set-version
        run: echo "version=$(date +%Y.%m.%d.%H%M)" >> $GITHUB_OUTPUT

      - name: Build and tag Docker image
        run: |
          docker build -t ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPO_NAME }}/${{ env.IMAGE_NAME }}:${{ steps.set-version.outputs.version }} .
          docker tag ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPO_NAME }}/${{ env.IMAGE_NAME }}:${{ steps.set-version.outputs.version }} \
                     ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPO_NAME }}/${{ env.IMAGE_NAME }}:latest

      - name: Push Docker image
        run: |
          docker push ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPO_NAME }}/${{ env.IMAGE_NAME }}:${{ steps.set-version.outputs.version }}
          docker push ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPO_NAME }}/${{ env.IMAGE_NAME }}:latest

  # Job 3: Terraform Apply
  terraform:
    runs-on: ubuntu-latest
    needs: docker
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.6.0

      - name: Terraform Init
        run: terraform -chdir=terraform init

      - name: Terraform Apply
        run: terraform -chdir=terraform apply -auto-approve

  # Job 4: Deploy no Cloud Run
  deploy:
    runs-on: ubuntu-latest
    needs: [docker, terraform]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ env.PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          export_default_credentials: true

      - name: Deploy no Cloud Run
        run: |
          VERSION=${{ needs.docker.outputs.version }}
          gcloud run deploy ${{ env.IMAGE_NAME }} \
            --image ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPO_NAME }}/${{ env.IMAGE_NAME }}:$VERSION \
            --region ${{ env.REGION }} \
            --platform managed \
            --allow-unauthenticated \
            --service-account ml-api-sa@${{ env.PROJECT_ID }}.iam.gserviceaccount.com

  # Job 5: Notificação Slack
  slack-notify:
    runs-on: ubuntu-latest
    needs: [test, docker, terraform, deploy]
    steps:
      - name: Send Slack notification
        if: ${{ always() }}
        run: |
          STATUS="SUCCESS"
          if [ "${{ job.status }}" != "success" ]; then
            STATUS="FAILED"
          fi
          curl -X POST -H 'Content-type: application/json' \
               --data "{\"text\":\"CI/CD Pipeline - ML API finished with status: $STATUS\"}" \
               ${{ env.SLACK_WEBHOOK }}
